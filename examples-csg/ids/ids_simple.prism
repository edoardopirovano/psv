// Intrusion detection system taken from
// Dynamic Policy-Based IDS Configuration 
// Quanyan Zhu and Tamer Basar
// gxn 20/03/18

// simple example from the paper with 2 libraries and attacks
// and system can only be healthy or compromised 

csg
//label "adv" = true; // uncomment for strategy synthesis

player turn [turn] endplayer
player csystem [step] endplayer
player policy [defend1], [defend2] endplayer
player attacker [attack1], [attack2] endplayer

const int rounds;

module turn

	turn : [0..1];
	// 0 - attack and defence chosen
	// 1 - system evolves (time passes)
	r : [0..rounds]; // current time-step
	
	[turn] turn=0 & r<rounds -> (turn'=1) & (r'=r+1);
	[turn] turn=1 -> (turn'=0);
	[turn] turn=0 & r=rounds -> true;
	
endmodule

module csystem
	s : [1..2]; // system state
	// 1 - healthy
	// 2 - compromised
	
	[step] turn=1 & l=1 & a=1 -> (s'=1);
	[step] turn=1 & l=1 & a=2 -> (s'=2);
	[step] turn=1 & l=2 & a=1 -> (s'=2);
	[step] turn=1 & l=2 & a=2 -> (s'=1);
	
endmodule

module policy
	l : [0..2]; // library in use
	
	[defend1] turn=0 & r<rounds -> (l'=1);
	[defend2] turn=0 & r<rounds -> (l'=2);

endmodule

module attacker
	a : [0..2]; // current attack
	
	[attack1] turn=0 & r<rounds -> (a'=1);
	[attack2] turn=0 & r<rounds -> (a'=2);
endmodule

rewards "damage"
	[step] s=1 & l=1 & a=1 : 0;
	[step] s=1 & l=1 & a=2 : 1;
	[step] s=1 & l=2 & a=1 : 0.5;
	[step] s=1 & l=2 & a=2 : 0;
	[step] s=2 & l=1 & a=1 : 1;
	[step] s=2 & l=1 & a=2 : 2;
	[step] s=2 & l=2 & a=1 : 1.5;
	[step] s=2 & l=2 & a=2 : 1;
endrewards	

rewards "i_damage"
	s=1 & l=1 & a=1 : 0;
	s=1 & l=1 & a=2 : 1;
	s=1 & l=2 & a=1 : 0.5;
	s=1 & l=2 & a=2 : 0;
	s=2 & l=1 & a=1 : 1;
	s=2 & l=1 & a=2 : 2;
	s=2 & l=2 & a=1 : 1.5;
	s=2 & l=2 & a=2 : 1;
endrewards	
