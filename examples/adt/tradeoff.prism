smg

const double pa = 0.1;
const double pb = 1;
const double pc = 0.1;

player a
attacker, [doAttackA], [dontDoAttackA], [doAttackB], [dontDoAttackB],
[doDefenceC], [dontDoDefenceC],
[succeed]
endplayer

player d
defender
//[doDefenceC], [dontDoDefenceC]
endplayer

module attacker

s1:[0..6];
//1-no_attack_a
//2-yes_attack_a
//3-no_attack_b
//4-yes_attack_b
//5-attack_failer
//6-attack_success

doA : bool init false;
doB : bool init false;

[doAttackA] s1=0 -> (s1'=2)&(doA'=true);
[dontDoAttackA] s1=0 -> (s1'=1);

[doAttackB] s1>=1&s1<=2 -> (s1'=4)&(doB'=true);
[dontDoAttackB] s1>=1&s1<=2 -> (s1'=3);

[] s1=4 & doA=true & doB=true -> pa*pb:(s1'=6) + 1-pa*pb:(s1'=5);
[] s1=4 & doA=false & doB=true -> (s1'=5);
[] s1=3 & doA=true & doB=false -> (s1'=5);
[] s1=3 & doA=false & doB=false -> (s1'=5);

[] s1=5 & s2>0 -> (s1'=5);
[] s1=6 & s2>0 -> (s1'=6);

endmodule

module defender

s2:[0..3];
//1-defence_failer
//2-defence_success
//3-end

[doDefenceC] s2=0 & s1=6 -> (1-pc):(s2'=2) + pc:(s2'=1);
[dontDoDefenceC] s2=0 & s1=6 -> (s2'=1);
[doDefenceC] s2=0 & s1=5 -> (s2'=1) ;
[dontDoDefenceC] s2=0 & s1=5 -> (s2'=1);

[succeed] s2=2 -> (s2'=3);

endmodule

//success state for an attacker
label "success" = s2=2;

rewards "cost"
[doAttackA] true:1;
[doAttackB] true:0;
[doDefenceC] true:100;
endrewards

rewards "success"
[succeed] true:1;
endrewards
