asynchronous = {chooseBlock, chooseTransmit}
agentEnvironment = {block_1, block_2, block_3, block_4, transmit_1, transmit_2, transmit_3, transmit_4}
globalSynchronous = {advanceRound}

agent module Transmitter
	// 1: Waiting for blockers to declare
	// 2: Choosing where to transmit
	// 3: Waiting to transmit
	// 4: Waiting for next round
	stateT: [1..4] init 1;
	transmitting : [0..4] init 0;

	[advanceRound] (stateT=1) -> 1.0:(stateT'=2);

	// Choose where to transmit
	[chooseTransmit] (stateT=2) -> 0.25:(stateT'=3) & (transmitting'=1)
		+ 0.25:(stateT'=3) & (transmitting'=2)
		+ 0.25:(stateT'=3) & (transmitting'=3)
		+ 0.25:(stateT'=3) & (transmitting'=4);

	// Choose where to transmit
	[transmit_1] (stateT=3) -> 1.0:(stateT'=4) & (transmitting'=0);
	[transmit_2] (stateT=3) -> 1.0:(stateT'=4) & (transmitting'=0);
	[transmit_3] (stateT=3) -> 1.0:(stateT'=4) & (transmitting'=0);
	[transmit_4] (stateT=3) -> 1.0:(stateT'=4) & (transmitting'=0);

	[advanceRound] (stateT=4) -> 1.0:(stateT'=1);
endmodule

agent module Blocker
	// 1: Choosing where to block
	// 2: Waiting to block
	// 3: Waiting for transmitters to finish
	// 4: Waiting for next round
	stateB: [1..4] init 1;
	blocking : [0..5] init 0;

	// Choose what to block
	[chooseBlock] (stateB=1) -> 0.25:(stateB'=2) & (blocking'=1)
		+ 0.25:(stateB'=2) & (blocking'=2)
		+ 0.25:(stateB'=2) & (blocking'=3)
		+ 0.25:(stateB'=2) & (blocking'=4);

	[block_1] (stateB=2 & blocking=1) -> 1.0:(stateB'=3) & (blocking'=0);
	[block_2] (stateB=2 & blocking=2) -> 1.0:(stateB'=3) & (blocking'=0);
	[block_3] (stateB=2 & blocking=3) -> 1.0:(stateB'=3) & (blocking'=0);
	[block_4] (stateB=2 & blocking=4) -> 1.0:(stateB'=3) & (blocking'=0);

	[advanceRound] (stateB=3) -> 1.0:(stateB'=4);
	[advanceRound] (stateB=4) -> 1.0:(stateB'=1);
endmodule

environment module Receiver
	// 1: Blockers declaring intentions
	// 2: Transmitters transmitting
	// 3: Message received
	stateR: [1..3] init 1;

	received: [0..20] init 0;
	roundsPassed: [0..60] init 0;

	// Record which channels are blocked
	blocked1: bool init false;
	blocked2: bool init false;
	blocked3: bool init false;
	blocked4: bool init false;
	
	[block_1] (stateR=1) -> 1.0:(blocked1'=true);
	[block_2] (stateR=1) -> 1.0:(blocked2'=true);
	[block_3] (stateR=1) -> 1.0:(blocked3'=true);
	[block_4] (stateR=1) -> 1.0:(blocked4'=true);

	[advanceRound] (stateR=1) -> 1.0:(stateR'=2);

	[transmit_1] (blocked1 & stateR=2) -> 0.3:(received'=received+1) & (stateR'=3) + 0.7:(received'=received);
	[transmit_1] (!blocked1 & stateR=2) -> 0.8:(received'=received+1)  & (stateR'=3) + 0.2:(received'=received);

	[transmit_2] (blocked2 & stateR=2) -> 0.3:(received'=received+1) & (stateR'=3) + 0.7:(received'=received);
	[transmit_2] (!blocked2 & stateR=2) -> 0.8:(received'=received+1) & (stateR'=3) + 0.2:(received'=received);

	[transmit_3] (blocked3 & stateR=2) -> 0.3:(received'=received+1) & (stateR'=3) + 0.7:(received'=received);
	[transmit_3] (!blocked3 & stateR=2) -> 0.8:(received'=received+1) & (stateR'=3) + 0.2:(received'=received);

	[transmit_4] (blocked4 & stateR=2) -> 0.3:(received'=received+1) & (stateR'=3) + 0.7:(received'=received);
	[transmit_4] (!blocked4 & stateR=2) -> 0.8:(received'=received+1) & (stateR'=3) + 0.2:(received'=received);

	[transmit_1] (stateR=2) -> 1.0:(stateR'=3);
	[transmit_2] (stateR=2) -> 1.0:(stateR'=3);
	[transmit_3] (stateR=2) -> 1.0:(stateR'=3);
	[transmit_4] (stateR=2) -> 1.0:(stateR'=3);

	[advanceRound] ((stateR=2 | stateR=3) & received<6 & roundsPassed<25) ->
		1.0:(stateR'=1) & (blocked1'=false) & (blocked2'=false) & (blocked3'=false) & (blocked4'=false) & (roundsPassed'=roundsPassed+1);
endmodule

label "receivedAll" = received_E=6;
label "roundsFinished" = roundsPassed_E=25;
