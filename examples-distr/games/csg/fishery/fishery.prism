csg

player p0
	[play], [move]
endplayer

player p1
	[g1], [ng1]
endplayer

player p2
	[g2], [ng2]
endplayer

const int nrounds;
const double p;

module arbiter
	s : [0..3] init 0;
	t : [0..1] init 0;
	r : [0..nrounds] init 0;
 	[play] (t=0) & (r<nrounds) -> (t'=1) & (r'=r+1);
 	//[play] (t=0) -> p : (t'=1) + 1-p : (s'=3); 
	//good
	[move] (s=0) & (t=1) & (a1=0) & (a2=0) -> 
					0.4 : (s'=0) & (t'=0) +
					0.4 : (s'=1) & (t'=0) +
					0.2 : (s'=2) & (t'=0);
	[move] (s=0) & (t=1) & (a1=0) & (a2=1) -> 
					0.5 : (s'=0) & (t'=0) +
					0.4 : (s'=1) & (t'=0) +
					0.1 : (s'=2) & (t'=0);
	[move] (s=0) & (t=1) & (a1=1) & (a2=0) -> 
					0.7 : (s'=0) & (t'=0) +
					0.2 : (s'=1) & (t'=0) +
					0.1 : (s'=2) & (t'=0);
	[move] (s=0) & (t=1) & (a1=1) & (a2=1) -> 
					0.8 : (s'=0) & (t'=0) +
					0.2 : (s'=1) & (t'=0);
	//medium
	[move] (s=1) & (t=1) & (a1=0) & (a2=0) ->
					0.5 : (s'=1) & (t'=0) +
					0.5 : (s'=2) & (t'=0);
	[move] (s=1) & (t=1) & (a1=0) & (a2=1) -> 
					0.1 : (s'=0) & (t'=0) +
					0.5 : (s'=1) & (t'=0) +
					0.4 : (s'=2) & (t'=0);
	[move] (s=1) & (t=1) & (a1=1) & (a2=0) -> 
					0.1 : (s'=0) & (t'=0) +
					0.6 : (s'=1) & (t'=0) +
					0.3 : (s'=2) & (t'=0);
	[move] (s=1) & (t=1) & (a1=1) & (a2=1) -> 
					0.2 : (s'=0) & (t'=0) +
					0.6 : (s'=1) & (t'=0) +
					0.2 : (s'=2) & (t'=0);
	//bad
	[move] (s=2) & (t=1) & (a1=0) & (a2=0) -> (s'=2) & (t'=0);
	[move] (s=2) & (t=1) & (a1=0) & (a2=1) -> 
					0.2 : (s'=1) & (t'=0) +
					0.8 : (s'=2) & (t'=0);
	[move] (s=2) & (t=1) & (a1=1) & (a2=0) ->
					0.1 : (s'=0) & (t'=0) +
					0.3 : (s'=1) & (t'=0) +
					0.6 : (s'=2) & (t'=0);
	[move] (s=2) & (t=1) & (a1=1) & (a2=1) ->
					0.1 : (s'=0) & (t'=0) +
					0.5 : (s'=1) & (t'=0) +
					0.4 : (s'=2) & (t'=0);
endmodule

module p1
	a1 : [0..1] init 0;
	[g1] (t=0) -> (a1'=0); //G
	[ng1] (t=0) -> (a1'=1); //NG
	[move] (t=1) -> (a1'=0);
endmodule

module p2
	a2 : [0..1] init 0; 
	[g2] (t=0) -> (a2'=0); //G
	[ng2] (t=0) -> (a2'=1); //NG
	[move] (t=1) -> (a2'=0);
endmodule

rewards "r1"
	//good
	[move] (s=0) & (a1=0) & (a2=0) : 10.0;
	[move] (s=0) & (a1=0) & (a2=1) : 10.0;
	[move] (s=0) & (a1=1) & (a2=0) : 8.0;
	[move] (s=0) & (a1=1) & (a2=1) : 8.0;
	//medium
	[move] (s=1) & (a1=0) & (a2=0) : 9.0;
	[move] (s=1) & (a1=0) & (a2=1) : 9.0;
	[move] (s=1) & (a1=1) & (a2=0) : 7.0;
	[move] (s=1) & (a1=1) & (a2=1) : 7.0;
	//bad
	[move] (s=2) & (a1=0) & (a2=0) : 6.0;
	[move] (s=2) & (a1=0) & (a2=1) : 6.0;
	[move] (s=2) & (a1=1) & (a2=0) : 5.0;
	[move] (s=2) & (a1=1) & (a2=1) : 5.0;
endrewards

rewards "r2"
	//good
	[move] (s=0) & (a1=0) & (a2=0) : 9.0;
	[move] (s=0) & (a1=0) & (a2=1) : 6.0;
	[move] (s=0) & (a1=1) & (a2=0) : 9.0;
	[move] (s=0) & (a1=1) & (a2=1) : 6.0;
	//medium
	[move] (s=1) & (a1=0) & (a2=0) : 6.0;
	[move] (s=1) & (a1=0) & (a2=1) : 4.0;
	[move] (s=1) & (a1=1) & (a2=0) : 6.0;
	[move] (s=1) & (a1=1) & (a2=1) : 4.0;
	//bad
	[move] (s=2) & (a1=0) & (a2=0) : 3.0;
	[move] (s=2) & (a1=0) & (a2=1) : 2.0;
	[move] (s=2) & (a1=1) & (a2=0) : 3.0;
	[move] (s=2) & (a1=1) & (a2=1) : 2.0;
endrewards