/* Generated By:JavaCC: Do not edit this line. PrismParserTokenManager.java */
package parser;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import jltl2ba.SimpleLTL;
import parser.ast.*;
import parser.ast.Module;
import parser.type.*;
import prism.ModelInfo;
import parser.visitor.*;
import prism.ModelType;
import prism.PrismLangException;

/** Token Manager. */
public class PrismParserTokenManager implements PrismParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfe8012e00044008L) != 0L || (active1 & 0x141ffcL) != 0L)
            return 23;
         if ((active1 & 0x40000000000000L) != 0L)
            return 1;
         if ((active1 & 0x400000000L) != 0L)
            return 11;
         if ((active0 & 0xf017fed1fffbbff0L) != 0L || (active1 & 0x1ebe003L) != 0L)
         {
            jjmatchedKind = 127;
            return 23;
         }
         return -1;
      case 1:
         if ((active0 & 0xc00000000L) != 0L)
            return 23;
         if ((active0 & 0xf7f7fed1fffbbff0L) != 0L || (active1 & 0x1ebe6ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 1;
            }
            return 23;
         }
         return -1;
      case 2:
         if ((active0 & 0x8003fa0000000800L) != 0L || (active1 & 0x8000L) != 0L)
            return 23;
         if ((active0 & 0x77f404d1fffbb7f0L) != 0L || (active1 & 0x1eb66ffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 2;
            }
            return 23;
         }
         return -1;
      case 3:
         if ((active0 & 0x67e0004100029100L) != 0L || (active1 & 0x246fdL) != 0L)
            return 23;
         if ((active0 & 0x10159c90fff926f0L) != 0L || (active1 & 0x1e92002L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 3;
            }
            return 23;
         }
         return -1;
      case 4:
         if ((active0 & 0x40020002650L) != 0L)
            return 23;
         if ((active0 & 0x33759890dff900a0L) != 0L || (active1 & 0x1e9206eL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 4;
            }
            return 23;
         }
         return -1;
      case 5:
         if ((active0 & 0x1005981080010080L) != 0L || (active1 & 0x90000L) != 0L)
            return 23;
         if ((active0 & 0x237000805ff80060L) != 0L || (active1 & 0x1e0206eL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 5;
            }
            return 23;
         }
         return -1;
      case 6:
         if ((active0 & 0x360000040200000L) != 0L || (active1 & 0x20006eL) != 0L)
            return 23;
         if ((active0 & 0x201000801fd800e0L) != 0L || (active1 & 0x1c02000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 6;
            return 23;
         }
         return -1;
      case 7:
         if ((active0 & 0x80000L) != 0L || (active1 & 0x800000L) != 0L)
            return 23;
         if ((active0 & 0x201000801fd000e0L) != 0L || (active1 & 0x1402000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 7;
            return 23;
         }
         return -1;
      case 8:
         if ((active0 & 0x800d800000L) != 0L)
            return 23;
         if ((active0 & 0x20100000125000e0L) != 0L || (active1 & 0x1402000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 8;
            return 23;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000000L) != 0L || (active1 & 0x402000L) != 0L)
            return 23;
         if ((active0 & 0x20100000105000e0L) != 0L || (active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 9;
            return 23;
         }
         return -1;
      case 10:
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x1000000L) != 0L)
            return 23;
         if ((active0 & 0x20100000005000e0L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 10;
            return 23;
         }
         return -1;
      case 11:
         if ((active0 & 0x400020L) != 0L)
            return 23;
         if ((active0 & 0x20100000001000c0L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 11;
            return 23;
         }
         return -1;
      case 12:
         if ((active0 & 0x2000000000000000L) != 0L)
            return 23;
         if ((active0 & 0x100000001000c0L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 12;
            return 23;
         }
         return -1;
      case 13:
         if ((active0 & 0x100000L) != 0L)
            return 23;
         if ((active0 & 0x100000000000c0L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 13;
            return 23;
         }
         return -1;
      case 14:
         if ((active0 & 0x100000000000c0L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 14;
            return 23;
         }
         return -1;
      case 15:
         if ((active0 & 0x10000000000040L) != 0L)
            return 23;
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 15;
            return 23;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 34:
         return jjStopAtPos(0, 123);
      case 37:
         return jjStopAtPos(0, 119);
      case 38:
         return jjStopAtPos(0, 90);
      case 39:
         return jjStopAtPos(0, 120);
      case 40:
         return jjStopAtPos(0, 99);
      case 41:
         return jjStopAtPos(0, 100);
      case 42:
         return jjStopAtPos(0, 117);
      case 43:
         return jjStopAtPos(0, 115);
      case 44:
         return jjStopAtPos(0, 97);
      case 45:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 118, 1);
      case 58:
         return jjStopAtPos(0, 95);
      case 59:
         return jjStopAtPos(0, 96);
      case 60:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x202800020000000L);
      case 61:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 62:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5000000000000L);
      case 63:
         return jjStopAtPos(0, 122);
      case 65:
         return jjStartNfaWithStates_0(0, 3, 23);
      case 67:
         return jjStartNfaWithStates_0(0, 14, 23);
      case 69:
         return jjStartNfaWithStates_0(0, 18, 23);
      case 70:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 71:
         return jjStartNfaWithStates_0(0, 37, 23);
      case 73:
         return jjStartNfaWithStates_0(0, 40, 23);
      case 78:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600L);
      case 80:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x7e0000000000000L, 0x0L);
      case 82:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfcL);
      case 83:
         return jjStartNfaWithStates_0(0, 76, 23);
      case 85:
         return jjStartNfaWithStates_0(0, 82, 23);
      case 87:
         return jjStartNfaWithStates_0(0, 84, 23);
      case 88:
         return jjStartNfaWithStates_0(0, 51, 23);
      case 91:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
      case 93:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x70L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3e00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1ff80000L, 0x1400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1e0000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000080L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2c000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x7f80000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xf000000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa1e000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 123:
         return jjStopAtPos(0, 105);
      case 124:
         return jjStopAtPos(0, 91);
      case 125:
         return jjStopAtPos(0, 106);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 46:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 48:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 23);
         break;
      case 60:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 61:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L);
      case 62:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 91:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 93:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x3c0020000000L, active1, 0x1L);
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 23);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x50L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x3800080008000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000001000000280L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x7e0000000000000L, active1, 0x2086fcL);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2c01ff80000L, active1, 0x1400000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000040010500L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000000L, active1, 0x820000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x820L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000023000L, active1, 0x6000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         break;
      case 97:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x10e0000000000000L, active1, 0x21cL);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000ff80000L, active1, 0x1480000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x50L, active1, 0x800000L);
      case 103:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 23);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x700004000000000L, active1, 0x4e0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x23000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x11800100000400L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000001000000380L, active1, 0x202000L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x10000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x20000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x8010000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 120:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000080000L, active1, 0x80002L);
      case 98:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000001000010080L, active1, 0L);
      case 99:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 23);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 23);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 23);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000002000L, active1, 0x200000L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 23);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000100000L, active1, 0L);
      case 103:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10600000L, active1, 0L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 23);
         break;
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x1980040800000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000000070L, active1, 0x60L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x24000400L, active1, 0x1400000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000008000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000L);
      case 120:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000000000L, active1, 0xcL);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000881000000080L, active1, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x1010000082000000L, active1, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1100000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 23);
         break;
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000001010000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x360000000000000L, active1, 0x40006cL);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x700000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 112:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8010000000L, active1, 0x1000002L);
      case 116:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active1, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x200000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x120000001000000L, active1, 0x2024L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8800000L, active1, 0x2L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 23);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 23);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0x1000000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x240008000200000L, active1, 0x48L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000080L, active1, 0x200000L);
      case 109:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 23);
         break;
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 23);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 23);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x400000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 23);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x500000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 120:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 23);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0L);
      case 97:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x800a400000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc00000L);
      case 101:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000100000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 23);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 23);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 23);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x10080040L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L, active1, 0L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L);
      case 120:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 23);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 23);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 23);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 23);
         break;
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x5000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000800000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000002500000L, active1, 0L);
      case 115:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 23);
         break;
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 23);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 23);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000400040L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      case 109:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0xa0L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L);
      case 99:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 77, 23);
         return jjMoveStringLiteralDfa10_0(active0, 0x80L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000L);
      case 101:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 86, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x10100000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L, active1, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 23);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000400000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L, active1, 0L);
      case 115:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 88, 23);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 28, 23);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x20L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x2010000000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L);
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(11, 5, 23);
         break;
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 22, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 61, 23);
         break;
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x80L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 20, 23);
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 52, 23);
         break;
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(15, 6, 23);
         break;
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(16, 7, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(22);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 126)
                        kind = 126;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(16, 17);
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 124)
                        kind = 124;
                  }
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(4, 6);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(4, 6);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 48 && kind > 124)
                     kind = 124;
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 35 && kind > 128)
                     kind = 128;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAddStates(0, 3);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 39 && kind > 126)
                     kind = 126;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAddStates(7, 9);
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(4, 6);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 16:
                  jjAddStates(12, 13);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(4, 6);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(12, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 12, 18, 2, 3, 5, 20, 21, 22, 13, 14, 16, 17, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\101", "\141\147\145\156\164", 
"\141\163\171\156\143\150\162\157\156\157\165\163", "\141\147\145\156\164\105\156\166\151\162\157\156\155\145\156\164", 
"\147\154\157\142\141\154\123\171\156\143\150\162\157\156\157\165\163", "\142\157\157\154", "\143\154\157\143\153", "\143\157\156\163\164", 
"\143\163\147", "\143\164\155\143", "\143\164\155\144\160", "\103", "\144\151\163\143", 
"\144\157\165\142\154\145", "\144\164\155\143", "\105", "\145\156\144\141\147\145\156\164", 
"\145\156\144\145\156\166\151\162\157\156\155\145\156\164", "\145\156\144\151\156\151\164", 
"\145\156\144\151\156\166\141\162\151\141\156\164", "\145\156\144\155\157\144\165\154\145", 
"\145\156\144\160\154\141\171\145\162", "\145\156\144\162\145\167\141\162\144\163", 
"\145\156\144\163\171\163\164\145\155", "\145\156\144\165\160\144\141\164\145", 
"\145\156\166\151\162\157\156\155\145\156\164", "\146\141\154\163\145", "\146\157\162\155\165\154\141", 
"\146\151\154\164\145\162", "\146\165\156\143", "\106", "\106\143", "\106\60", "\147\154\157\142\141\154", 
"\107", "\151\156\151\164", "\151\156\166\141\162\151\141\156\164", "\111", 
"\151\156\164", "\154\141\142\145\154", "\155\141\170\155\141\170", 
"\155\141\170\155\151\156", "\155\141\170", "\155\144\160", "\155\151\156\155\141\170", 
"\155\151\156\155\151\156", "\155\151\156", "\155\157\144\165\154\145", "\130", 
"\156\157\156\144\145\164\145\162\155\151\156\151\163\164\151\143", "\120\155\141\170\155\141\170", "\120\155\141\170\155\151\156", 
"\120\155\141\170", "\120\155\151\156\155\141\170", "\120\155\151\156\155\151\156", 
"\120\155\151\156", "\120", "\160\154\141\171\145\162", 
"\160\162\157\142\141\142\151\154\151\163\164\151\143", "\160\162\157\142", "\160\164\141", "\162\141\164\145", 
"\162\145\167\141\162\144\163", "\122\155\141\170\155\141\170", "\122\155\141\170\155\151\156", 
"\122\155\141\170", "\122\155\151\156\155\141\170", "\122\155\151\156\155\151\156", 
"\122\155\151\156", "\122", "\116\155\141\170", "\116\155\151\156", "\116", "\123", 
"\163\164\157\143\150\141\163\164\151\143", "\163\164\160\147", "\163\155\147", "\163\171\163\164\145\155", 
"\164\162\165\145", "\125", "\165\160\144\141\164\145", "\127", "\163\155\157\144\165\154\145", 
"\145\156\144\163\155\157\144\165\154\145", "\163\162\145\167\141\162\144\163", 
"\145\156\144\163\162\145\167\141\162\144\163", "\41", "\46", "\174", "\75\76", "\74\75\76", "\55\76", "\72", "\73", "\54", 
"\56\56", "\50", "\51", "\133", "\135", "\133\133", "\135\135", "\173", "\175", "\75", 
"\41\75", "\74", "\76", "\74\74", "\76\76", "\74\75", "\76\75", "\53", "\55", "\52", 
"\57", "\45", "\47", "\74\55", "\77", "\42", null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff9L, 0xffffffffffffffffL, 0x3L, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x6L, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[23];
static private final int[] jjstateSet = new int[46];
static protected char curChar;
/** Constructor. */
public PrismParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public PrismParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 129)
   {
      jjmatchedKind = 129;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
