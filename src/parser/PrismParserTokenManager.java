/* Generated By:JavaCC: Do not edit this line. PrismParserTokenManager.java */
package parser;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import jltl2ba.SimpleLTL;
import parser.BooleanUtils;
import parser.ast.*;
import parser.type.*;
import prism.ModelInfo;
import parser.visitor.*;
import prism.ModelType;
import prism.PrismLangException;

/** Token Manager. */
public class PrismParserTokenManager implements PrismParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x81fd0025c0008808L) != 0L || (active1 & 0x283ffL) != 0L)
            return 23;
         if ((active1 & 0x8000000000000L) != 0L)
            return 1;
         if ((active1 & 0x80000000L) != 0L)
            return 11;
         if ((active0 & 0x7e02ffda3fff77f0L) != 0L || (active1 & 0x3d7c00L) != 0L)
         {
            jjmatchedKind = 124;
            return 23;
         }
         return -1;
      case 1:
         if ((active0 & 0x180000000L) != 0L)
            return 23;
         if ((active0 & 0xfefeffda3fff77f0L) != 0L || (active1 & 0x3d7cdfL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 124;
               jjmatchedPos = 1;
            }
            return 23;
         }
         return -1;
      case 2:
         if ((active0 & 0x10007f4000000100L) != 0L || (active1 & 0x1000L) != 0L)
            return 23;
         if ((active0 & 0xeefe809a3fff76f0L) != 0L || (active1 & 0x3d6cdfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 124;
               jjmatchedPos = 2;
            }
            return 23;
         }
         return -1;
      case 3:
         if ((active0 & 0xacfc000820005220L) != 0L || (active1 & 0x48dfL) != 0L)
            return 23;
         if ((active0 & 0x4202b3921fff24d0L) != 0L || (active1 & 0x3d2400L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 124;
               jjmatchedPos = 3;
            }
            return 23;
         }
         return -1;
      case 4:
         if ((active0 & 0xc66eb3121bff2000L) != 0L || (active1 & 0x3d240dL) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 4;
            return 23;
         }
         if ((active0 & 0x80040004d0L) != 0L)
            return 23;
         return -1;
      case 5:
         if ((active0 & 0x200b30210002000L) != 0L || (active1 & 0x12000L) != 0L)
            return 23;
         if ((active0 & 0xc46e00100bff0000L) != 0L || (active1 & 0x3c040dL) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 5;
            return 23;
         }
         return -1;
      case 6:
         if ((active0 & 0x402001003fb0000L) != 0L || (active1 & 0x380400L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 6;
            return 23;
         }
         if ((active0 & 0xc06c000008040000L) != 0L || (active1 & 0x4000dL) != 0L)
            return 23;
         return -1;
      case 7:
         if ((active0 & 0x402001003fa0000L) != 0L || (active1 & 0x280400L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 7;
            return 23;
         }
         if ((active0 & 0x10000L) != 0L || (active1 & 0x100000L) != 0L)
            return 23;
         return -1;
      case 8:
         if ((active0 & 0x4020000024a0000L) != 0L || (active1 & 0x280400L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 8;
            return 23;
         }
         if ((active0 & 0x1001b00000L) != 0L)
            return 23;
         return -1;
      case 9:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x80400L) != 0L)
            return 23;
         if ((active0 & 0x4020000020a0000L) != 0L || (active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 9;
            return 23;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000000L) != 0L || (active1 & 0x200000L) != 0L)
            return 23;
         if ((active0 & 0x4020000000a0000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 10;
            return 23;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000L) != 0L)
            return 23;
         if ((active0 & 0x402000000020000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 11;
            return 23;
         }
         return -1;
      case 12:
         if ((active0 & 0x400000000000000L) != 0L)
            return 23;
         if ((active0 & 0x2000000020000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 12;
            return 23;
         }
         return -1;
      case 13:
         if ((active0 & 0x20000L) != 0L)
            return 23;
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 13;
            return 23;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 14;
            return 23;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      case 34:
         return jjStopAtPos(0, 120);
      case 37:
         return jjStopAtPos(0, 116);
      case 38:
         return jjStopAtPos(0, 87);
      case 39:
         return jjStopAtPos(0, 117);
      case 40:
         return jjStopAtPos(0, 96);
      case 41:
         return jjStopAtPos(0, 97);
      case 42:
         return jjStopAtPos(0, 114);
      case 43:
         return jjStopAtPos(0, 112);
      case 44:
         return jjStopAtPos(0, 94);
      case 45:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 115, 1);
      case 58:
         return jjStopAtPos(0, 92);
      case 59:
         return jjStopAtPos(0, 93);
      case 60:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40500004000000L);
      case 61:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 62:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa00000000000L);
      case 63:
         return jjStopAtPos(0, 119);
      case 65:
         return jjStartNfaWithStates_0(0, 3, 23);
      case 67:
         return jjStartNfaWithStates_0(0, 11, 23);
      case 69:
         return jjStartNfaWithStates_0(0, 15, 23);
      case 70:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x0L);
      case 71:
         return jjStartNfaWithStates_0(0, 34, 23);
      case 73:
         return jjStartNfaWithStates_0(0, 37, 23);
      case 78:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0L);
      case 80:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0xfc000000000000L, 0x0L);
      case 82:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1fL);
      case 83:
         return jjStartNfaWithStates_0(0, 73, 23);
      case 85:
         return jjStartNfaWithStates_0(0, 79, 23);
      case 87:
         return jjStartNfaWithStates_0(0, 81, 23);
      case 88:
         return jjStartNfaWithStates_0(0, 48, 23);
      case 91:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 93:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7c0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3ff0000L, 0x280000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3c000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x5800000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xff0000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e00000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x143c00L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 123:
         return jjStopAtPos(0, 102);
      case 124:
         return jjStopAtPos(0, 88);
      case 125:
         return jjStopAtPos(0, 103);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         break;
      case 46:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 48:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 23);
         break;
      case 60:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 61:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L);
      case 62:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 91:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 93:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000078004000000L, active1, 0L);
      case 99:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 23);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x700010001000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000200000040L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80fc000000000000L, active1, 0x410dfL);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x5803ff0000L, active1, 0x280000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000080020a0L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0x104000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000004600L, active1, 0xc00L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 90);
         break;
      case 97:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x821c000000000000L, active1, 0x43L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x800001ff0000L, active1, 0x290000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L, active1, 0x100000L);
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 23);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xe0000800000000L, active1, 0x9cL);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4600L, active1, 0L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2300020000080L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000200000060L, active1, 0x40400L);
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0x2000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x4000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1002000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 120:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000001000010000L, active1, 0x10000L);
      case 98:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000200002000L, active1, 0L);
      case 99:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 23);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 23);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 23);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x40L, active1, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000400L, active1, 0x40000L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 23);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000020000L, active1, 0L);
      case 103:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20c0000L, active1, 0L);
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 23);
         break;
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x330008100000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000000010L, active1, 0xcL);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4800080L, active1, 0x280000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800001000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L);
      case 120:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x800c000000000000L, active1, 0x1L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400110200000000L, active1, 0x100000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x202000010400000L, active1, 0x2000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x220000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 23);
         break;
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000202000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x806c000000000000L, active1, 0x8000dL);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0xe0000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L);
      case 112:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000001002000000L, active1, 0x200000L);
      case 116:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 4, 23);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x40000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8024000000200000L, active1, 0x404L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000001100000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 23);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 23);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x48001000040000L, active1, 0x9L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x40000L);
      case 109:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 23);
         break;
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 23);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 23);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0x80000L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 23);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0xa0000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 120:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 23);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x1001480000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x180000L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000020000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 23);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 23);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 23);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x2010000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      case 120:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 23);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 23);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 23);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 23);
         break;
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0xa00000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000100000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000004a0000L, active1, 0L);
      case 115:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 23);
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 23);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000080000L, active1, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L);
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L, active1, 0L);
      case 99:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 74, 23);
         break;
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 83, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x2020000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 23);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000080000L, active1, 0L);
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 85, 23);
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 25, 23);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x402000000000000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(11, 19, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 58, 23);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 17, 23);
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 49, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(22);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(16, 17);
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 121)
                        kind = 121;
                  }
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(4, 6);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(4, 6);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 48 && kind > 121)
                     kind = 121;
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 35 && kind > 125)
                     kind = 125;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAddStates(0, 3);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 39 && kind > 123)
                     kind = 123;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(7, 9);
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(4, 6);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 16:
                  jjAddStates(12, 13);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(4, 6);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(12, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 12, 18, 2, 3, 5, 20, 21, 22, 13, 14, 16, 17, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\101", "\141\147\145\156\164", "\142\157\157\154", 
"\143\154\157\143\153", "\143\157\156\163\164", "\143\163\147", "\143\164\155\143", 
"\143\164\155\144\160", "\103", "\144\151\163\143", "\144\157\165\142\154\145", "\144\164\155\143", 
"\105", "\145\156\144\141\147\145\156\164", 
"\145\156\144\145\156\166\151\162\157\156\155\145\156\164", "\145\156\144\151\156\151\164", 
"\145\156\144\151\156\166\141\162\151\141\156\164", "\145\156\144\155\157\144\165\154\145", 
"\145\156\144\160\154\141\171\145\162", "\145\156\144\162\145\167\141\162\144\163", 
"\145\156\144\163\171\163\164\145\155", "\145\156\144\165\160\144\141\164\145", 
"\145\156\166\151\162\157\156\155\145\156\164", "\146\141\154\163\145", "\146\157\162\155\165\154\141", 
"\146\151\154\164\145\162", "\146\165\156\143", "\106", "\106\143", "\106\60", "\147\154\157\142\141\154", 
"\107", "\151\156\151\164", "\151\156\166\141\162\151\141\156\164", "\111", 
"\151\156\164", "\154\141\142\145\154", "\155\141\170\155\141\170", 
"\155\141\170\155\151\156", "\155\141\170", "\155\144\160", "\155\151\156\155\141\170", 
"\155\151\156\155\151\156", "\155\151\156", "\155\157\144\165\154\145", "\130", 
"\156\157\156\144\145\164\145\162\155\151\156\151\163\164\151\143", "\120\155\141\170\155\141\170", "\120\155\141\170\155\151\156", 
"\120\155\141\170", "\120\155\151\156\155\141\170", "\120\155\151\156\155\151\156", 
"\120\155\151\156", "\120", "\160\154\141\171\145\162", 
"\160\162\157\142\141\142\151\154\151\163\164\151\143", "\160\162\157\142", "\160\164\141", "\162\141\164\145", 
"\162\145\167\141\162\144\163", "\122\155\141\170\155\141\170", "\122\155\141\170\155\151\156", 
"\122\155\141\170", "\122\155\151\156\155\141\170", "\122\155\151\156\155\151\156", 
"\122\155\151\156", "\122", "\116\155\141\170", "\116\155\151\156", "\116", "\123", 
"\163\164\157\143\150\141\163\164\151\143", "\163\164\160\147", "\163\155\147", "\163\171\163\164\145\155", 
"\164\162\165\145", "\125", "\165\160\144\141\164\145", "\127", "\163\155\157\144\165\154\145", 
"\145\156\144\163\155\157\144\165\154\145", "\163\162\145\167\141\162\144\163", 
"\145\156\144\163\162\145\167\141\162\144\163", "\41", "\46", "\174", "\75\76", "\74\75\76", "\55\76", "\72", "\73", "\54", 
"\56\56", "\50", "\51", "\133", "\135", "\133\133", "\135\135", "\173", "\175", "\75", 
"\41\75", "\74", "\76", "\74\74", "\76\76", "\74\75", "\76\75", "\53", "\55", "\52", 
"\57", "\45", "\47", "\74\55", "\77", "\42", null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff9L, 0x7fffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x6L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[23];
static private final int[] jjstateSet = new int[46];
static protected char curChar;
/** Constructor. */
public PrismParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public PrismParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 126)
   {
      jjmatchedKind = 126;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
